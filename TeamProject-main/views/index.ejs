<!DOCTYPE html>
<html>
<head>
    <meta charset="utf-8" />
    <title>당신 주변의 화장실</title>
    <link rel="stylesheet" type = "text/css" href="../main.css">
</head>
<script type="text/javascript" src="//dapi.kakao.com/v2/maps/sdk.js?appkey=a641bf6182d4ba26d22ac16ec2ce4bee"></script>

<!-- 제이쿼리 추가 -->
<script src="http://code.jquery.com/jquery-latest.js"></script>

<body class="index">
    <div class="index">
        <h1> 당신 주변의 화장실 </h1>
    </div>
    <br/>
    <br/>
    <div class = "mapNlist">
        <div id="map" style="width:500px;height:400px;"></div>
        <div id="search">
            <button class="btn" onclick="GetNearList()" id="NearFilter" value="OFF">주변의 화장실 불러오기</button>
            <button class="btn" onclick="displayCerMarker()">지도 변경</button>
            <form action="http://localhost:3000/" method = "POST">
                <div>
                    <input type="checkbox" name="genFreeC" id="부가시설" ><label>남녀공용화장실 제외</label>
                    <input type="checkbox" name="disabledC" id="부가시설"><label>장애인용 화장실</label>
                    <input type="checkbox" name="childC" id="부가시설"><label>어린이용 화장실</label>
                    <br />
                    <input type="checkbox" name="diaperC" id="부가시설"><label>기저귀교환대</label>
                    <input type="checkbox" name="sanitaryC" id="부가시설"><label>생리대자판기</label>
                    <input type="checkbox" name="CamC" id="부가시설"><label>불법촬영신고지역 제외</label>
                </div>
                <div>
                        <button type="submit" class="btn" onclick="WAIT()" id="filtering">분류 검색</button>
                </div>
                <p id ="hidden_input">
                    <% if (filtered != undefined) {
                        for (var i = 0; i < filtered.length; i++){%>
                            <input type="hidden" name="listElements" value=<%=filtered[i]%>></input>
                        <%}
                    } %>
                </p>
            </form>
            <div id = "list">
                <% if (filtered != undefined) {%>
                    <% if (filtered.length == 0) { %>
                        <p>이 근방에는 조건을 만족하는 화장실이 없습니다!</p>
                    <%} else { %>
                        <p>근처 화장실 목록:</p>
                    <% for (var i = 0; i < filtered.length; i++){%>
                        <a href = "http://localhost:3000/<%=filtered[i]%>"><%=filtered[i]%></a><br />
                    <%}}
                } %>
            </div>
        </div>
    </div>
    
        <!-- 로딩화면------------ ------------------------------------------ㄱ>
    <div class="loading">
        <img class="loading" id="loading" src="https://ifh.cc/g/zvbQ2O.png" alt="logo_background" 
        style="
            position: absolute;
            flex-direction: column;
            z-index:2; 
            top: 50%;
            left: 50%;
            transform: translate(-50%, -50%);
            margin: 0 auto;
            width: 100vw;
            height: 100vh;
        ">
        <img class="loading" id="loading" src="https://ifh.cc/g/ERCeO3.png" alt="logo" 
        style="
            position: absolute;
            flex-direction: column;
            z-index:2; 
            top: 50%;
            left: 50%;
            transform: translate(-50%, -50%);
            margin: 0 auto;
        ">

    </div>
    <!ㄴ-------------------------------------------------------------------- --ㅣ>
    
<script  type="text/javascript">
if ( window.history.replaceState ) {
        window.history.replaceState( null, null, window.location.href );
    }
var Mylat;
var Mylon;
var mapContainer = document.getElementById('map'), // 지도를 표시할 div 
    mapOption = { 
        center: new kakao.maps.LatLng(33.450701, 126.570667), // 지도의 중심좌표
        level: 8 // 지도의 확대 레벨 
    }; 

var map = new kakao.maps.Map(mapContainer, mapOption); // 지도를 생성합니다
var positions = [];
var markers = [];
var infos;

//----------로딩화면 구현--------------ㄱ
start();
function start() {
    setTimeout(function() {
        $(".loading").hide();
        console.log('loaded!');
    }, 1000);
}
//ㄴ------------------------------------ㅣ

function Make(title,lat,lon)
    {
    this.title = title;
    this.latlng = new kakao.maps.LatLng(lat, lon);
    }
fetch('https://2018147570.github.io/HomeworkRepository/LAB4/경기도공중화장실현황.json')
.then(function(response) {
  return response.json();
})
.then(
  posts => {posts.forEach(add_post);
  displayMarker(locPosition, message);
})
.catch(function(err) {
  console.log('Fetch problem: ' + err.message);
});
function add_post(comments)
{
 var b = new Make(comments.PBCTLT_PLC_NM,comments.REFINE_WGS84_LAT,comments.REFINE_WGS84_LOGT); 
   positions.push(b);
}
// HTML5의 geolocation으로 사용할 수 있는지 확인합니다 
if (navigator.geolocation) {
    
    // GeoLocation을 이용해서 접속 위치를 얻어옵니다
    navigator.geolocation.getCurrentPosition(function(position) {
        
        var lat = position.coords.latitude, // 위도
            lon = position.coords.longitude; // 경도
        
        var locPosition = new kakao.maps.LatLng(lat, lon), // 마커가 표시될 위치를 geolocation으로 얻어온 좌표로 생성합니다
            message = '<div style="padding:5px;">여기에 계신가요?!</div>'; // 인포윈도우에 표시될 내용입니다
            map.setCenter(locPosition); 
            Mylat = lat;
            Mylon = lon;
            var a=
    {
        title: '현재위치', 
        latlng: locPosition
    };
    positions.push(a);
    
      });
    
} else { // HTML5의 GeoLocation을 사용할 수 없을때 마커 표시 위치와 인포윈도우 내용을 설정합니다
    
    var locPosition = new kakao.maps.LatLng(33.450701, 126.570667),    
        message = 'geolocation을 사용할수 없어요..'
}

// 지도에 마커와 인포윈도우를 표시하는 함수입니다
function displayMarker(locPosition, message) {
for (var i = 0; i < positions.length; i ++) {
    // 마커를 생성합니다
    var marker = new kakao.maps.Marker({
        map: map, // 마커를 표시할 지도
        position: positions[i].latlng, // 마커의 위치
        clickable: true
    });

    // 마커에 표시할 인포윈도우를 생성합니다 
    var infowindow = new kakao.maps.InfoWindow({
        content: '<a style="padding:5px;">'+positions[i].title+'</a>' // 인포윈도우에 표시할 내용
    });
    var infowindows = new kakao.maps.InfoWindow({
        content: '<a style="text-algin:center;" href= "http://localhost:3000/'+positions[i].title+'">더보기</a>' // 인포윈도우에 표시할 내용
    });
    // 마커에 mouseover 이벤트와 mouseout 이벤트를 등록합니다
    // 이벤트 리스너로는 클로저를 만들어 등록합니다 
    // for문에서 클로저를 만들어 주지 않으면 마지막 마커에만 이벤트가 등록됩니다
    kakao.maps.event.addListener(marker, 'mouseover', makeOverListener(map, marker, infowindow));
    kakao.maps.event.addListener(marker, 'click', makeClickListener(map, marker, infowindows));
    kakao.maps.event.addListener(marker, 'mouseout', makeOutListener(infowindow));
    kakao.maps.event.addListener(marker, 'rightclick',makeRightListener(infowindows));
    markers.push(marker);
}
// 인포윈도우를 클릭시 표시하는 클로저를 만드는 함수입니다 
function makeClickListener(map, marker, infowindow) {
      
    return function() {
        infowindow.open(map, marker);
    };
}
// 인포윈도우를 표시하는 클로저를 만드는 함수입니다 
function makeOverListener(map, marker, infowindow) {
    return function() {
        infowindow.open(map, marker);
    };
}

// 인포윈도우를 닫는 클로저를 만드는 함수입니다 
function makeOutListener(infowindow) {
    return function() {
        infowindow.close();
    };
}
function makeRightListener(infowindow) {
    return function() {
        infowindow.close();
    };
}
map.setCenter(locPosition);
}    
function displayCerMarker() {
    map.setLevel(6);
    const centerPos = new kakao.maps.LatLng(Mylat,Mylon);
    const radius = 5000; // 반경 m단위
    var checke = markers.length;
for (var i = 0; i < markers.length; i ++) {
    var linePath;
    var lineLine = new kakao.maps.Polyline();
    var distance;
    linePath = [centerPos,positions[i].latlng]
    lineLine.setPath(linePath);
    distance = Math.round(lineLine.getLength());
    if (distance>radius){
        checke= checke-1;
        markers[i].setMap(null);
    }
}
console.log(checke);
map.setCenter(centerPos);
}

function GetNearList(){
    var Button = document.getElementById('NearFilter');
    var condition = Button.getAttribute('value');
    var checkn = 0;
    if (condition == "ON") {alert('이미 주변 탐색이 완료되었습니다.'); return false;}
    else {
        document.getElementById('hidden_input').innerHTML = '';
        document.getElementById('list').innerHTML = '';
        for (var i = 0; i < positions.length -1; i ++) {
            var compLat = parseFloat(positions[i].latlng.Ma);
            var compLon = parseFloat(positions[i].latlng.La);
            var LatDiff = Math.abs(Mylat - compLat);
            var LonDiff = Math.abs(Mylon - compLon)

            if (positions[i].title != '현재위치' && ((LatDiff < 0.06) && (LonDiff < 0.06))) {
                checkn = checkn+1;
                var infoNode1 = document.createElement('input');
                infoNode1.setAttribute('type', 'hidden');
                infoNode1.setAttribute('name', 'listElements');
                infoNode1.setAttribute('value', positions[i].title);
                var linkbox = document.createElement('div');
                var text1 = document.createTextNode(positions[i].title);
                var link = document.createElement('a');
                link.href = "http://localhost:3000/" + positions[i].title;
                link.appendChild(text1);
                document.getElementById("filtering").appendChild(infoNode1);
                linkbox.appendChild(link);
                document.getElementById("list").appendChild(linkbox);
            }
        }
        document.getElementById('NearFilter').setAttribute('value', 'ON');
        document.getElementById('filtering').setAttribute('type', 'submit');
        document.getElementById('filtering').removeAttribute('onclick', 'WAIT()');
    }
    console.log(checkn);
}

function WAIT() {
    if ($('#hidden_input').is(':empty')) {
        alert('주변 탐색을 먼저 진행해주세요.');
        return false;
    }
}

</script>
<div id="posts">
</div>

</body>
</html>
